import { Link } from 'react-router-dom';
import { ArrowLeft, Calendar, MapPin, Clock, Users, Star, ChevronRight } from 'lucide-react';
import Footer from '@/components/Footer';
import { useEffect, useState } from 'react';
import newsService, { Evento } from '@/services/NewsService';

// Componente para la tarjeta de cada evento
const EventoCard = ({ evento }: { evento: Evento }) => {
  return (
    <div className="bg-white rounded-xl shadow-md overflow-hidden border border-gray-100 h-full flex flex-col hover:shadow-lg transition-shadow duration-300">
      {/* Imagen del evento con badge */}
      <div className="relative h-56 overflow-hidden">
        <img 
          src={evento.imagenPrincipal} 
          alt={evento.titulo}
          className="w-full h-full object-cover hover:scale-105 transition-transform duration-500"
        />
        <div className="absolute inset-0 bg-gradient-to-t from-black/70 via-black/30 to-transparent" />
        
        {evento.destacado && (
          <div className="absolute top-4 right-4">
            <span className="bg-gradient-to-r from-yellow-400 to-orange-500 text-white px-3 py-1 rounded-full text-xs font-bold shadow-lg">
              <Star className="w-3 h-3 inline mr-1" />
              Destacado
            </span>
          </div>
        )}

        <div className="absolute bottom-4 left-4 right-4">
          <span className="bg-[#2d472f]/90 text-white px-3 py-1 rounded-md text-xs font-medium">
            {evento.categoria}
          </span>
          <h3 className="text-white font-bold mt-2 text-xl line-clamp-2">{evento.titulo}</h3>
        </div>
      </div>
      
      {/* Contenido */}
      <div className="p-5 flex flex-col flex-grow">
        <p className="text-gray-600 mb-4 line-clamp-3">{evento.descripcion}</p>
        
        <div className="mt-auto space-y-3">
          <div className="flex items-center text-gray-500 text-sm">
            <Calendar className="w-4 h-4 mr-2" />
            {evento.fecha}
          </div>
          <div className="flex items-center text-gray-500 text-sm">
            <MapPin className="w-4 h-4 mr-2" />
            {evento.ubicacion.split(' - ')[0]}
          </div>
          <Link 
            to={`/eventos/${evento.slug}`} 
            className="mt-4 inline-flex items-center font-semibold text-[#4b6d3b] hover:text-[#2d472f]"
          >
            Ver más detalles
            <ChevronRight className="w-4 h-4 ml-1" />
          </Link>
        </div>
      </div>
    </div>
  );
};

const Eventos = () => {
  const [eventos, setEventos] = useState<Evento[]>([]);
  const [eventosDestacados, setEventosDestacados] = useState<Evento[]>([]);
  
  useEffect(() => {
    // Cargar eventos
    const todosEventos = newsService.getEventos();
    const destacados = newsService.getEventosDestacados();
    
    setEventos(todosEventos);
    setEventosDestacados(destacados);
  }, []);

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Hero Section */}
      <div className="relative bg-gradient-to-br from-[#2d472f] to-[#375935]">
        <div className="absolute inset-0 overflow-hidden opacity-20">
          <svg className="absolute left-0 top-0 h-full w-full" width="100%" height="100%">
            <defs>
              <pattern id="grid-pattern" width="40" height="40" patternUnits="userSpaceOnUse">
                <path d="M0 40L40 0M0 0L40 40" stroke="white" strokeWidth="1" fill="none" />
              </pattern>
            </defs>
            <rect width="100%" height="100%" fill="url(#grid-pattern)" />
          </svg>
        </div>
        <div className="relative max-w-7xl mx-auto py-24 px-4 sm:px-6 lg:px-8 flex flex-col items-center justify-center text-center">
          <h1 className="text-4xl sm:text-5xl md:text-6xl font-bold text-white mb-6">
            Eventos y Novedades
          </h1>
          <p className="max-w-2xl mx-auto text-xl text-emerald-50 font-light">
            Participa en nuestros eventos y mantente actualizado con las últimas tendencias
          </p>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
        {/* Navegación */}
        <div className="mb-8">
          <Link 
            to="/" 
            className="inline-flex items-center space-x-2 text-[#2d472f] hover:text-[#4b6d3b] transition-colors font-semibold"
          >
            <ArrowLeft className="w-5 h-5" />
            <span>Volver al Inicio</span>
          </Link>
        </div>
        
        {/* Eventos Destacados */}
        {eventosDestacados.length > 0 && (
          <section className="mb-16">
            <div className="flex items-center justify-between mb-8">
              <h2 className="text-3xl font-bold text-[#2d472f]">Eventos Destacados</h2>
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
              {eventosDestacados.map((evento) => (
                <EventoCard key={evento.id} evento={evento} />
              ))}
            </div>
          </section>
        )}
        
        {/* Todos los eventos */}
        <section>
          <div className="flex items-center justify-between mb-8">
            <h2 className="text-3xl font-bold text-[#2d472f]">Todos los Eventos</h2>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
            {eventos.map((evento) => (
              <EventoCard key={evento.id} evento={evento} />
            ))}
          </div>
          
          {eventos.length === 0 && (
            <div className="text-center py-12">
              <p className="text-gray-500 text-lg">No hay eventos programados por el momento.</p>
            </div>
          )}
        </section>
      </div>
      
      <Footer />
    </div>
  );
};

export default Eventos;
